{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nconst handleError = (error, fallback) => {\n  if (axios.isAxiosError(error)) {\n    var _axiosError$response;\n    const axiosError = error;\n    console.error('API Error:', ((_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : _axiosError$response.data) || axiosError.message);\n  } else {\n    console.error('Unexpected error:', error);\n  }\n  return fallback;\n};\nexport const api = {\n  // Get all users\n  getUsers: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/users`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, []);\n    }\n  },\n  // Add new user\n  addUser: async name => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/users`, {\n        name\n      });\n      return response.data;\n    } catch (error) {\n      return handleError(error, null);\n    }\n  },\n  // Claim points for a user\n  claimPoints: async userId => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/claim`, {\n        userId\n      });\n      return response.data;\n    } catch (error) {\n      return handleError(error, null);\n    }\n  },\n  // Get leaderboard\n  getLeaderboard: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\n      return response.data;\n    } catch (error) {\n      return handleError(error, []);\n    }\n  },\n  // Get claim history\n  getClaimHistory: async userId => {\n    try {\n      const url = userId ? `${API_BASE_URL}/claim/history/${userId}` : `${API_BASE_URL}/claim/history`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      return handleError(error, []);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleError","error","fallback","isAxiosError","_axiosError$response","axiosError","console","response","data","message","api","getUsers","get","addUser","name","post","claimPoints","userId","getLeaderboard","getClaimHistory","url"],"sources":["D:/programing/project/frontend/src/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { User, LeaderboardEntry, ClaimResponse, ClaimHistoryEntry } from './types';\r\n\r\nconst API_BASE_URL = 'http://localhost:5001/api';\r\n\r\nconst handleError = (error: unknown, fallback: any) => {\r\n  if (axios.isAxiosError(error)) {\r\n    const axiosError = error as AxiosError;\r\n    console.error(\r\n      'API Error:',\r\n      axiosError.response?.data || axiosError.message\r\n    );\r\n  } else {\r\n    console.error('Unexpected error:', error);\r\n  }\r\n  return fallback;\r\n};\r\n\r\nexport const api = {\r\n  // Get all users\r\n  getUsers: async (): Promise<User[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/users`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleError(error, []);\r\n    }\r\n  },\r\n\r\n  // Add new user\r\n  addUser: async (name: string): Promise<User | null> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/users`, { name });\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleError(error, null);\r\n    }\r\n  },\r\n\r\n  // Claim points for a user\r\n  claimPoints: async (userId: string): Promise<ClaimResponse | null> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/claim`, { userId });\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleError(error, null);\r\n    }\r\n  },\r\n\r\n  // Get leaderboard\r\n  getLeaderboard: async (): Promise<LeaderboardEntry[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleError(error, []);\r\n    }\r\n  },\r\n\r\n  // Get claim history\r\n  getClaimHistory: async (userId?: string): Promise<ClaimHistoryEntry[]> => {\r\n    try {\r\n      const url = userId \r\n        ? `${API_BASE_URL}/claim/history/${userId}`\r\n        : `${API_BASE_URL}/claim/history`;\r\n      const response = await axios.get(url);\r\n      return response.data;\r\n    } catch (error) {\r\n      return handleError(error, []);\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAsB,OAAO;AAGzC,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,WAAW,GAAGA,CAACC,KAAc,EAAEC,QAAa,KAAK;EACrD,IAAIJ,KAAK,CAACK,YAAY,CAACF,KAAK,CAAC,EAAE;IAAA,IAAAG,oBAAA;IAC7B,MAAMC,UAAU,GAAGJ,KAAmB;IACtCK,OAAO,CAACL,KAAK,CACX,YAAY,EACZ,EAAAG,oBAAA,GAAAC,UAAU,CAACE,QAAQ,cAAAH,oBAAA,uBAAnBA,oBAAA,CAAqBI,IAAI,KAAIH,UAAU,CAACI,OAC1C,CAAC;EACH,CAAC,MAAM;IACLH,OAAO,CAACL,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;EAC3C;EACA,OAAOC,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMQ,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACrC,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,QAAQ,CAAC;MACzD,OAAOQ,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,EAAE,CAAC;IAC/B;EACF,CAAC;EAED;EACAY,OAAO,EAAE,MAAOC,IAAY,IAA2B;IACrD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMT,KAAK,CAACiB,IAAI,CAAC,GAAGhB,YAAY,QAAQ,EAAE;QAAEe;MAAK,CAAC,CAAC;MACpE,OAAOP,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,IAAI,CAAC;IACjC;EACF,CAAC;EAED;EACAe,WAAW,EAAE,MAAOC,MAAc,IAAoC;IACpE,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMT,KAAK,CAACiB,IAAI,CAAC,GAAGhB,YAAY,QAAQ,EAAE;QAAEkB;MAAO,CAAC,CAAC;MACtE,OAAOV,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,IAAI,CAAC;IACjC;EACF,CAAC;EAED;EACAiB,cAAc,EAAE,MAAAA,CAAA,KAAyC;IACvD,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,cAAc,CAAC;MAC/D,OAAOQ,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,EAAE,CAAC;IAC/B;EACF,CAAC;EAED;EACAkB,eAAe,EAAE,MAAOF,MAAe,IAAmC;IACxE,IAAI;MACF,MAAMG,GAAG,GAAGH,MAAM,GACd,GAAGlB,YAAY,kBAAkBkB,MAAM,EAAE,GACzC,GAAGlB,YAAY,gBAAgB;MACnC,MAAMQ,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAACQ,GAAG,CAAC;MACrC,OAAOb,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,OAAOD,WAAW,CAACC,KAAK,EAAE,EAAE,CAAC;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}