{"ast":null,"code":"import axios from 'axios';\n// Function to test server connection\nconst findServerPort = async () => {\n  const ports = [5000, 5001, 5002, 5003, 5004, 5005];\n  for (const port of ports) {\n    try {\n      const response = await axios.get(`http://localhost:${port}/api/users`);\n      if (response.status === 200) {\n        return port;\n      }\n    } catch (error) {\n      if (error.code !== 'ECONNREFUSED') {\n        continue;\n      }\n    }\n  }\n  throw new Error('Could not connect to server on any port');\n};\nlet API_URL = 'http://localhost:5000/api';\n\n// Initialize API URL\nfindServerPort().then(port => {\n  API_URL = `http://localhost:${port}/api`;\n  console.log(`Connected to server on port ${port}`);\n}).catch(err => {\n  console.error('Failed to connect to server:', err);\n});\nexport const api = {\n  // Get all users\n  getUsers: async () => {\n    const response = await axios.get(`${API_URL}/users`);\n    return response.data;\n  },\n  // Add new user\n  addUser: async name => {\n    const response = await axios.post(`${API_URL}/users`, {\n      name\n    });\n    return response.data;\n  },\n  // Claim points for a user\n  claimPoints: async userId => {\n    const response = await axios.post(`${API_URL}/claim`, {\n      userId\n    });\n    return response.data;\n  },\n  // Get leaderboard\n  getLeaderboard: async () => {\n    const response = await axios.get(`${API_URL}/leaderboard`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","findServerPort","ports","port","response","get","status","error","code","Error","API_URL","then","console","log","catch","err","api","getUsers","data","addUser","name","post","claimPoints","userId","getLeaderboard"],"sources":["D:/programing/project/frontend/src/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { User, LeaderboardEntry, ClaimResponse } from './types';\r\n\r\n// Function to test server connection\r\nconst findServerPort = async () => {\r\n  const ports = [5000, 5001, 5002, 5003, 5004, 5005];\r\n  \r\n  for (const port of ports) {\r\n    try {\r\n      const response = await axios.get(`http://localhost:${port}/api/users`);\r\n      if (response.status === 200) {\r\n        return port;\r\n      }\r\n    } catch (error) {\r\n      if (error.code !== 'ECONNREFUSED') {\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n  throw new Error('Could not connect to server on any port');\r\n};\r\n\r\nlet API_URL = 'http://localhost:5000/api';\r\n\r\n// Initialize API URL\r\nfindServerPort().then(port => {\r\n  API_URL = `http://localhost:${port}/api`;\r\n  console.log(`Connected to server on port ${port}`);\r\n}).catch(err => {\r\n  console.error('Failed to connect to server:', err);\r\n});\r\n\r\nexport const api = {\r\n  // Get all users\r\n  getUsers: async (): Promise<User[]> => {\r\n    const response = await axios.get(`${API_URL}/users`);\r\n    return response.data;\r\n  },\r\n\r\n  // Add new user\r\n  addUser: async (name: string): Promise<User> => {\r\n    const response = await axios.post(`${API_URL}/users`, { name });\r\n    return response.data;\r\n  },\r\n\r\n  // Claim points for a user\r\n  claimPoints: async (userId: string): Promise<ClaimResponse> => {\r\n    const response = await axios.post(`${API_URL}/claim`, { userId });\r\n    return response.data;\r\n  },\r\n\r\n  // Get leaderboard\r\n  getLeaderboard: async (): Promise<LeaderboardEntry[]> => {\r\n    const response = await axios.get(`${API_URL}/leaderboard`);\r\n    return response.data;\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAElD,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;IACxB,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,oBAAoBF,IAAI,YAAY,CAAC;MACtE,IAAIC,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAOH,IAAI;MACb;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;QACjC;MACF;IACF;EACF;EACA,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;AAC5D,CAAC;AAED,IAAIC,OAAO,GAAG,2BAA2B;;AAEzC;AACAT,cAAc,CAAC,CAAC,CAACU,IAAI,CAACR,IAAI,IAAI;EAC5BO,OAAO,GAAG,oBAAoBP,IAAI,MAAM;EACxCS,OAAO,CAACC,GAAG,CAAC,+BAA+BV,IAAI,EAAE,CAAC;AACpD,CAAC,CAAC,CAACW,KAAK,CAACC,GAAG,IAAI;EACdH,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEQ,GAAG,CAAC;AACpD,CAAC,CAAC;AAEF,OAAO,MAAMC,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACrC,MAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGK,OAAO,QAAQ,CAAC;IACpD,OAAON,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAC,OAAO,EAAE,MAAOC,IAAY,IAAoB;IAC9C,MAAMhB,QAAQ,GAAG,MAAMJ,KAAK,CAACqB,IAAI,CAAC,GAAGX,OAAO,QAAQ,EAAE;MAAEU;IAAK,CAAC,CAAC;IAC/D,OAAOhB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAI,WAAW,EAAE,MAAOC,MAAc,IAA6B;IAC7D,MAAMnB,QAAQ,GAAG,MAAMJ,KAAK,CAACqB,IAAI,CAAC,GAAGX,OAAO,QAAQ,EAAE;MAAEa;IAAO,CAAC,CAAC;IACjE,OAAOnB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAM,cAAc,EAAE,MAAAA,CAAA,KAAyC;IACvD,MAAMpB,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGK,OAAO,cAAc,CAAC;IAC1D,OAAON,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}