{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nexport const api = {\n  // Get all users\n  getUsers: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/users`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      return [];\n    }\n  },\n  // Add new user\n  addUser: async name => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/users`, {\n        name\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error adding user:', error);\n      return null;\n    }\n  },\n  // Claim points for a user\n  claimPoints: async userId => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/claim`, {\n        userId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error claiming points:', error);\n      return null;\n    }\n  },\n  // Get leaderboard\n  getLeaderboard: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","getUsers","response","get","data","error","console","addUser","name","post","claimPoints","userId","getLeaderboard"],"sources":["D:/programing/project/frontend/src/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { User, LeaderboardEntry, ClaimResponse } from './types';\r\n\r\nconst API_BASE_URL = 'http://localhost:5001/api';\r\n\r\nexport const api = {\r\n  // Get all users\r\n  getUsers: async (): Promise<User[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/users`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Add new user\r\n  addUser: async (name: string): Promise<User | null> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/users`, { name });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error adding user:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Claim points for a user\r\n  claimPoints: async (userId: string): Promise<ClaimResponse | null> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/claim`, { userId });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error claiming points:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Get leaderboard\r\n  getLeaderboard: async (): Promise<LeaderboardEntry[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching leaderboard:', error);\r\n      return [];\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAsB,OAAO;AAGzC,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,QAAQ,CAAC;MACzD,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAE,OAAO,EAAE,MAAOC,IAAY,IAA2B;IACrD,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACW,IAAI,CAAC,GAAGV,YAAY,QAAQ,EAAE;QAAES;MAAK,CAAC,CAAC;MACpE,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAK,WAAW,EAAE,MAAOC,MAAc,IAAoC;IACpE,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACW,IAAI,CAAC,GAAGV,YAAY,QAAQ,EAAE;QAAEY;MAAO,CAAC,CAAC;MACtE,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,IAAI;IACb;EACF,CAAC;EAED;EACAO,cAAc,EAAE,MAAAA,CAAA,KAAyC;IACvD,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,cAAc,CAAC;MAC/D,OAAOG,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO,EAAE;IACX;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}