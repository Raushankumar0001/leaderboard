{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5001/api';\nconst handleError = error => {\n  if (axios.isAxiosError(error)) {\n    var _axiosError$response, _axiosError$response$;\n    const axiosError = error;\n    // Return the server's error message if available\n    throw new Error(((_axiosError$response = axiosError.response) === null || _axiosError$response === void 0 ? void 0 : (_axiosError$response$ = _axiosError$response.data) === null || _axiosError$response$ === void 0 ? void 0 : _axiosError$response$.message) || axiosError.message);\n  }\n  // For non-Axios errors, throw as is\n  throw error;\n};\nexport const api = {\n  // Get all users\n  getUsers: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/users`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n      throw handleError(error);\n    }\n  },\n  // Add new user\n  addUser: async name => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/users`, {\n        name\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add user:', error);\n      throw handleError(error);\n    }\n  },\n  // Claim points for a user\n  claimPoints: async userId => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/claim`, {\n        userId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to claim points:', error);\n      throw handleError(error);\n    }\n  },\n  // Get leaderboard\n  getLeaderboard: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch leaderboard:', error);\n      throw handleError(error);\n    }\n  },\n  // Get claim history\n  getClaimHistory: async userId => {\n    try {\n      const url = userId ? `${API_BASE_URL}/claim/history/${userId}` : `${API_BASE_URL}/claim/history`;\n      const response = await axios.get(url);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch claim history:', error);\n      throw handleError(error);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","handleError","error","isAxiosError","_axiosError$response","_axiosError$response$","axiosError","Error","response","data","message","api","getUsers","get","console","addUser","name","post","claimPoints","userId","getLeaderboard","getClaimHistory","url"],"sources":["D:/programing/project/frontend/src/api.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { User, LeaderboardEntry, ClaimResponse, ClaimHistoryEntry } from './types';\r\n\r\nconst API_BASE_URL = 'http://localhost:5001/api';\r\n\r\nconst handleError = (error: unknown) => {\r\n  if (axios.isAxiosError(error)) {\r\n    const axiosError = error as AxiosError<{ message: string }>;\r\n    // Return the server's error message if available\r\n    throw new Error(axiosError.response?.data?.message || axiosError.message);\r\n  }\r\n  // For non-Axios errors, throw as is\r\n  throw error;\r\n};\r\n\r\nexport const api = {\r\n  // Get all users\r\n  getUsers: async (): Promise<User[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/users`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch users:', error);\r\n      throw handleError(error);\r\n    }\r\n  },\r\n\r\n  // Add new user\r\n  addUser: async (name: string): Promise<User> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/users`, { name });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to add user:', error);\r\n      throw handleError(error);\r\n    }\r\n  },\r\n\r\n  // Claim points for a user\r\n  claimPoints: async (userId: string): Promise<ClaimResponse> => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/claim`, { userId });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to claim points:', error);\r\n      throw handleError(error);\r\n    }\r\n  },\r\n\r\n  // Get leaderboard\r\n  getLeaderboard: async (): Promise<LeaderboardEntry[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/leaderboard`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch leaderboard:', error);\r\n      throw handleError(error);\r\n    }\r\n  },\r\n\r\n  // Get claim history\r\n  getClaimHistory: async (userId?: string): Promise<ClaimHistoryEntry[]> => {\r\n    try {\r\n      const url = userId \r\n        ? `${API_BASE_URL}/claim/history/${userId}`\r\n        : `${API_BASE_URL}/claim/history`;\r\n      const response = await axios.get(url);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to fetch claim history:', error);\r\n      throw handleError(error);\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAsB,OAAO;AAGzC,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,WAAW,GAAIC,KAAc,IAAK;EACtC,IAAIH,KAAK,CAACI,YAAY,CAACD,KAAK,CAAC,EAAE;IAAA,IAAAE,oBAAA,EAAAC,qBAAA;IAC7B,MAAMC,UAAU,GAAGJ,KAAwC;IAC3D;IACA,MAAM,IAAIK,KAAK,CAAC,EAAAH,oBAAA,GAAAE,UAAU,CAACE,QAAQ,cAAAJ,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBK,IAAI,cAAAJ,qBAAA,uBAAzBA,qBAAA,CAA2BK,OAAO,KAAIJ,UAAU,CAACI,OAAO,CAAC;EAC3E;EACA;EACA,MAAMR,KAAK;AACb,CAAC;AAED,OAAO,MAAMS,GAAG,GAAG;EACjB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAA6B;IACrC,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,QAAQ,CAAC;MACzD,OAAOQ,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMD,WAAW,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED;EACAa,OAAO,EAAE,MAAOC,IAAY,IAAoB;IAC9C,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMT,KAAK,CAACkB,IAAI,CAAC,GAAGjB,YAAY,QAAQ,EAAE;QAAEgB;MAAK,CAAC,CAAC;MACpE,OAAOR,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMD,WAAW,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED;EACAgB,WAAW,EAAE,MAAOC,MAAc,IAA6B;IAC7D,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMT,KAAK,CAACkB,IAAI,CAAC,GAAGjB,YAAY,QAAQ,EAAE;QAAEmB;MAAO,CAAC,CAAC;MACtE,OAAOX,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMD,WAAW,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED;EACAkB,cAAc,EAAE,MAAAA,CAAA,KAAyC;IACvD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAAC,GAAGb,YAAY,cAAc,CAAC;MAC/D,OAAOQ,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMD,WAAW,CAACC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED;EACAmB,eAAe,EAAE,MAAOF,MAAe,IAAmC;IACxE,IAAI;MACF,MAAMG,GAAG,GAAGH,MAAM,GACd,GAAGnB,YAAY,kBAAkBmB,MAAM,EAAE,GACzC,GAAGnB,YAAY,gBAAgB;MACnC,MAAMQ,QAAQ,GAAG,MAAMT,KAAK,CAACc,GAAG,CAACS,GAAG,CAAC;MACrC,OAAOd,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdY,OAAO,CAACZ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMD,WAAW,CAACC,KAAK,CAAC;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}